User.java(entity)
package com.example.demo.entity;

import javax.persistence.*;

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    // Getters and Setters (Omitted for brevity)
UserRepository.java(Respository)
package com.example.demo.repository;

import com.example.demo.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}
UserService.java
package com.example.demo.service;

import com.example.demo.entity.User;

public interface UserService {
    User signUp(User user);

    User login(String username, String password);
}
UserServiceimpl.java( Service implementation)
package com.example.demo.service;

import com.example.demo.entity.User;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserServiceImpl implements UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public UserServiceImpl(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public User signUp(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    @Override
    public User login(String username, String password) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalArgumentException("Invalid username or password"));

        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new IllegalArgumentException("Invalid username or password");
        }

        return user;
    }
}
Securityconfig.java(Security configuration)
package com.example.demo.config;

import com.example.demo.security.JwtAuthenticationFilter;
import com.example.demo.security.JwtAuthorizationFilter;
import com.example.demo.security.JwtTokenProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    private final UserDetailsService userDetailsService;
    private final JwtTokenProvider tokenProvider;

    @Autowired
    public SecurityConfig(UserDetailsService userDetailsService, JwtTokenProvider tokenProvider) {
        this.userDetailsService = userDetailsService;
        this.tokenProvider = tokenProvider;
    }

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected void configure(AuthenticationManager)


Backend Login and Signup REST API with Security Features

This is a Spring Boot application that provides REST APIs for user login and signup with security features. It uses Spring Security for authentication and authorization and JWT (JSON Web Token) for secure token-based authentication. The data is stored in an H2 in-memory database.

Prerequisites

Java Development Kit (JDK) 8 or later

Apache Maven

Installation and Setup

Clone the repository or download the source code:

bashCopy code

git clone <repository-url> 

Open the project in your favorite IDE (e.g., IntelliJ IDEA, Eclipse).

Build the project using Maven. Navigate to the project directory and run the following command:

bashCopy code

mvn clean install 

Start the application. Run the following command from the project directory:

bashCopy code

mvn spring-boot:run 

The application will start running on http://localhost:8080.

Access the H2 Database Console. Open your browser and navigate to http://localhost:8080/h2-console.

In the JDBC URL field, enter jdbc:h2:mem:testdb.

Leave the Username field blank.

Leave the Password field blank.

Click the Connect button.

You should now have access to the H2 Database Console.

API Endpoints

The following API endpoints are available:

POST /api/signup - User signup

POST /api/login - User login

To test the APIs, you can use tools like Postman or cURL.

API Usage

User Signup

Send a POST request to /api/signup with the following JSON payload:

jsonCopy code

{ "username": "Bharadawaj", "password": "password123" } 

On successful signup, the API will return the created user object.

User Login

Send a POST request to /api/login with the following JSON payload:

jsonCopy code

{ "username": "john.doe", "password": "password123" } 

On successful login, the API will return a JWT token in the response.

Security

The API endpoints /api/signup and /api/login are public and do not require authentication. All other endpoints require a valid JWT token to access.

To include the JWT token in the request, add an Authorization header with the value Bearer <JWT_TOKEN>.

Note

This application uses an in-memory H2 database for simplicity. If you restart the application, all data will be lost. For a production environment, consider using a persistent database like MySQL or PostgreSQL.

